// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Server.DataAccess.Context;
using System;

namespace Server.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20171022180458_ChangeIdGeneration")]
    partial class ChangeIdGeneration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.DataAccess.Model.Account", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Server.DataAccess.Model.CashAccount", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("CurrencyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CashAccounts");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Cashflow", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("CashAccountId");

                    b.Property<Guid>("CashflowCategoryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CashAccountId");

                    b.HasIndex("CashflowCategoryId");

                    b.ToTable("Cashflows");
                });

            modelBuilder.Entity("Server.DataAccess.Model.CashflowCategory", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AccountId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentCashflowCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentCashflowCategoryId");

                    b.ToTable("CashflowCategories");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Currency", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Server.DataAccess.Model.HistoryChange", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("AccountId");

                    b.Property<Guid?>("AccountId1");

                    b.Property<string>("Column");

                    b.Property<string>("RowId");

                    b.Property<string>("Table");

                    b.Property<int>("USN");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AccountId1");

                    b.ToTable("HistoryChanges");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Token", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AccountId");

                    b.Property<int>("IsStop");

                    b.Property<string>("RefreshToken");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Server.DataAccess.Model.CashAccount", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Account", "Account")
                        .WithMany("CashAccounts")
                        .HasForeignKey("AccountId");

                    b.HasOne("Server.DataAccess.Model.Currency", "Currency")
                        .WithMany("CashAccounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.DataAccess.Model.Cashflow", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Account", "Account")
                        .WithMany("Cashflows")
                        .HasForeignKey("AccountId");

                    b.HasOne("Server.DataAccess.Model.CashAccount", "CashAccount")
                        .WithMany("Cashflows")
                        .HasForeignKey("CashAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.DataAccess.Model.CashflowCategory", "CashflowCategory")
                        .WithMany("Cashflows")
                        .HasForeignKey("CashflowCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.DataAccess.Model.CashflowCategory", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Account", "Account")
                        .WithMany("CashflowCategories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.DataAccess.Model.CashflowCategory", "ParentCashflowCategory")
                        .WithMany("ChildrenCashflowCategories")
                        .HasForeignKey("ParentCashflowCategoryId");
                });

            modelBuilder.Entity("Server.DataAccess.Model.HistoryChange", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Account", "Account")
                        .WithMany("HistoryChanges")
                        .HasForeignKey("AccountId1");
                });

            modelBuilder.Entity("Server.DataAccess.Model.Token", b =>
                {
                    b.HasOne("Server.DataAccess.Model.Account", "Account")
                        .WithMany("Tokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
